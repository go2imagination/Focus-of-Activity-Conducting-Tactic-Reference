{"./":{"url":"./","title":"简介","keywords":"","body":"简介 敏捷这个词已经越来越多的广泛使用 本书是《敏捷教练战术手册》（简称手册）的参考。手册的设计初衷是为了让操作者能够非常明确的执行，且在执行的过程期望有两种效果。第一，企业软件交付的快速止血。第二，教练的能力水平能够持续提高。但也正是因为专注执行的原因，所以其中很多文字太过简单、直白。 本书的目的就是让这过于简单与直白的文字更容易理解。对于为什么要这么要求，这里也尝试提供更多背景信息，带有温度的故事可能才能更让大家印象深刻。最后还有更多知识的补充和对比也会浓缩于此，丰富你的知识体系。 This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "},"01_The_Story.html":{"url":"01_The_Story.html","title":"故事是这样的","keywords":"","body":"故事是这样的 理想与现实的鸿沟 "},"02_The_Differences.html":{"url":"02_The_Differences.html","title":"有哪些不一样","keywords":"","body":"独有的原则与价值观 "},"design_alliance.html":{"url":"design_alliance.html","title":"共识","keywords":"","body":"共识 故事是这样的…… 转变或蜕变是需要通过一个用“关系”所打造的容器来实现。这是一种彼此信任的关系，在这种信任关系之中团队愿意迎接挑战，走出舒适区域，为共同创造完成预备过程。 共识阶段就是为了建立这种信任关系而诞生的。如果彼此已经有了非常强悍的信任关系，跳过此部分也是可以的。 如何能够形成赋能且信任的关系是敏捷教练在修炼过程中需要持续关注的内容。团队如果认为你是在以“敏捷”的名义蹂躏他们的话，说明这个阶段的工作没有实施到位。 "},"F1.html":{"url":"F1.html","title":"F1 痛点目标共识","keywords":"","body":""},"co_create.html":{"url":"co_create.html","title":"共创","keywords":"","body":""},"F5.html":{"url":"F5.html","title":"F5 协作校准","keywords":"","body":""},"collaboration_tools_selection.html":{"url":"collaboration_tools_selection.html","title":"如何选择电子工具","keywords":"","body":"如何选择支持敏捷的电子协作工具 作者：王宇（ACT Leader） “We become what we behold. We shape our tools, and thereafter our tools shape us.” --Marshall McLuhan \"我们定义工具，然后工具定义我们；我们定义机器，没准我们就是机器。\"——马歇尔·麦克卢汉 工具的遐想 如果我说纸和笔是协作工具的鼻祖，估计没有人反对我的观点。你肯定会说如果纸和笔算是协作工具的话，桌子和椅子应该也算吧。 我不太好反驳你，这种工具（甚至是东西）基于林迪效应，估计会一直存在下去。估计只要有人这东西就会一直存在下去，天荒地老，海枯石烂。那什么是林迪效应呢？ 林迪效应是指，对于一些不会自然消亡的东西，比如一种技术、一个想法，它们的预期寿命和它们目前已经存在的时间成正比。即它每多生存一段时间，它的剩余预期寿命就会增加一点。——维基百科 所以尽可能选择那些存在时间久的物理工具，因为这些工具可以存活更长的时间。但如果你问如果是敏捷电子协作工具的话该如何选择呢？ 我们需要首先思考 “敏捷”对工具有什么追求 说到敏捷对于工具的追求肯定要提及下面的内容： “个体和互动 高于 流程和工具” ——敏捷软件开发宣言 “Individuals and interactions over processes and tools”——Manifesto for Agile Software Development 一般对于这个的解释是：我们认同流程和工具的价值，但更认同个体和互动的价值。另一种解释是，敏捷的流程和工具需要更好的支持个体和互动。 对于如何能够更好的支持个体和互动的工具，我认为有一个非常重要的特征，这就是： 工具的进攻性 纸和笔我一般认为这是一种“进攻”型工具，什么是“进攻型”工具呢？进攻型工具追求适应性，而防守型工具追求定制性。纸与笔基本没有配置的需要，直接拿来就用，所见即所得。与纸和笔非常类似的“敏捷”工具是报事贴（sticky note），这种协作工具大量充斥在敏捷项目之中。如果把物理看板、白板甚至电子工具也认为为一种工具的话，这几个事物进攻指数（已存在的时间）应该是： 纸和笔 > 报事贴 > 白板 > 物理看板 > 电子工具 其实报事贴与纸和笔的进攻指数已经非常接近了。进攻性程度同样可以理解为独立性（依赖少），纸不太依赖笔（我拿一块石头都能在纸上画出样子来），笔也不太依赖纸（我可以在桌子上花，也可以在墙上画）。进攻性越差的工具往往依赖更多的事物，恰恰是更多的依赖，造成工具不能迅速且敏捷的支持“个体和互动”。 说到电子工具，你会解释说都是SaaS，有计算机就行，没有什么依赖啊。但我想说明的是任何的电子工具都对计算机造成了依赖，有的对网络造成了依赖，对输入法造成了依赖。甚至如果把计算机的硬件层、操作系统层、浏览器层逐一打开的话，你会发现任何的电子工具相比较物理工具都拥有更多的依赖。 对于电子工具我还没有谈及配置和定制部分。如果配置与定制需要另一个人才能操作，这就增加了更多的依赖关系。如果你之前做过开发工作的话，你应该能够想象得到如果某些模块依赖过多的话会有什么结果：系统脆弱（易产生缺陷），难以维护（逻辑复杂），不愿触碰（难以理解）。 如果你的敏捷团队在同一地点的话，你会非常习惯于报事贴、纸和笔、物理白版或墙。电子工具你会感觉非常的突兀和不合适。因为你不倾向让沟通的带宽因为拥有依赖的工具而降低。 回到电子工具 如果说把常见电子工具的进攻性（适应性）进行排序的话将会是下面的顺序： 邮件系统（1981年SMTP协议发明） > Excel（1985年发明） > Wiki（1995年发明） > 团队可自行配置的工具 > 团队不可自行配置的工具（类似MIS或ERP） 邮件系统，本质是一个区块链的信息传递与责任确认系统。在这个系统之中，信息传递与责任确认 要高于 协作。Excel本质是一个结构化信息存放工具，顺便能产生一些图表。对于协作的话，可能就需要邮件系统的转发Excel了。但，邮件与Excel没有解决的一个关键问题就是，信息状态分散的问题。缺少基本的版本控制，举一个简单例子就是别人发给你的Excel表格，你改了改又发给其他人，大家只能认为最后发出的邮件中包含的附件是最新版本的内容。但是真实情况不一定是这样，邮件版本可能乱七八糟，Excel上的结构混乱不堪。邮件+Excel最大的问题在于太过灵活，每一个人都可以形成自己的一个信息状态的版本。 Wiki确实是因为协作而产生的工具，且是第一个极限编程项目c2诞生的工具。这点与团队可自行配置的一些工具有些相似之处，自行配置意味着可以完全控制这个工具的使用方向，并加以定制。比如可以定义看板的不同价值阶段，甚至给某些工具写插件进行更进一步的定制。 最后就是团队不可自行配置的工具，这些工具一般由专人进行配置。针对特定领域，如财务、软件项目管理、流程审批等等。这种工具的一大特点是具有“管理”特性，沉淀企业中的流程与数据，并使之电子化。MIS（Management Information System）这个概念早在主机时代就已经诞生，现在依旧存在。说到这个概念，就不得不说一下工具的防守性。 工具的防守性 企业运营的过程中存在着两个力，一个是让旧事物更为高效的力（管理力），另一个是让改变与新事物更容易产生的力（领导力）。对于角色的分工、流程的划分、工作的标准化这属于管理力的一种具体体现。这种思维从20世纪初的福特为开始，到基于戴明理论的全面质量管理（TQM）为鼎盛。这种力的趋势拥有一个假设，就是如果你没有一个好的过程的话，那如何拥有一个好的结果呢？ 有趣的是因为VUCA，不稳定\"(Volatile)、\"不确定\"(Uncertain)、\"复杂\"(Complex)、和\"模糊\"(Ambiguous)已经在21世纪成为一种新常态，所以改变与新事物的力倾向这样的一种假设：你管什么过程啊，得到结果就好（黑猫白猫，抓到耗子就是好猫）。也正因为对领导力更为的重视，所以敏捷概念现在如火如荼的在各行各业扩展开来。 我们要承认这两种力的存在，这两种力对于企业演进的当下状态来说都具有价值。但我们需要明确的是，关注改变与创新的时候，同时要思考让旧有的事物更为高效。当我们思考让事物高效的时候，不要成为改变与创新的障碍。 切不可形成一套防守式的“敏捷管理系统”，单方面给团队设定一些所谓的流程和必填字段。这不是敏捷的工具，更不是敏捷的思路。这只不过是打着敏捷旗号的统治而已。给予团队工具和支持，与团队明确重要的节点与信息以及可能的影响。让团队可以犯错，并且也能够让团队自行修正这才是站在防守大陆上，迈向进攻状态的关键思路。 敏捷电子协作工具需要具备的特点 使用过很多电子工具之后，我非常明确有一些关注点，或是一种倾向。这些内容，可以成为你选择敏捷电子工具的一些考量方面。 感知既真实 团队在高频率与工具交互的过程需要一致的数据体验，不能有等几分钟再操作这种事情。信息需要透明统一、状态一致、结构清晰： 操作与显示的即时性：团队成员的操作，需要即时的在其他的计算机上进行展现。这样才有协作的意义，而不是在一台计算机上进行全部的操作，或是一台计算机操作完毕之后另一台计算机需要按刷新按钮才能进入下一步的操作。（团队成员在操作一个事物，更改一个状态） 结构与冲突的直观性：能够非常明显的表现出协作的关键点，而不是需要通过搜索和过滤才能查询到。对协作关键内容的要能够直观展现，能够迅速定位。一眼看出现在协作的重要事项、风险。（团队成员可以拥有不同层次的视图，调整自己的视角进行审视） 使用既配置 敏捷团队所期望的是不丧失防守特性的进攻武器。但本质上这应该是一件进攻性武器，进攻性武器就应该如同纸和笔一般，直观、有效、默认没有限制。团队需要工具配置发生调整的时候，可以及时调整不需要让其他人帮忙，甚至没有“配置”概念，一切配置都在使用中发生： 使用的过程就是配置的过程：团队中的任何人都可以更改配置。比如，增加字段、增加状态信息类型、删除（丢弃）数据甚至是字段。没有“设置”的菜单或是功能。 配置信息的版本控制与记录保存：正是因为配置的灵活与动态能力，所以需要针对配置信息的版本控制与记录保存。工具不光能够记录协作的最新状态，而且能够记录协作规则的演变过程。并查询（甚至是回滚）到某次协作的时间点，重新审视协作的关键流程或内容。 管理既提醒 团队需要管理信息的有效性，某些字段是必输入的，某些流程关键点是重要的。但工具应该能够允许灰色数据的输入，并进行提醒，甚至明确某个团队有多少个没有达到数据要求标准的输入内容。如同下图，之前数据输入之后，只有两种状态，一个是合规一个是不合规的两种状态。但是现在需要敏捷协作工具能够适应数据不合规的状态，并且对于日后可能设置的新数据规范能够对当前数据进行提醒（B阶段的状态）。 数据输入与管理的松耦：之前类似MIS系统不属于进攻工具的一个重要特性就是它对灰色数据的控制与管理。一般来说系统设计是不允许灰色数据的产生的，因为如果有灰色数据产生的话，数据关系无法清晰的进行描述。但恰恰是允许更多灰色数据的输入才能可以产生更多可能性。 提醒而不是阻止：对于数据来说，我们太习惯用减少多样性的方式来面对。但对于敏捷项目来说，多样性本身就存在无数可能。现在有效的不一定未来有效，如何能够实现管理目的，又能不僵化的控制信息输入。信息的输入应该像一个喇叭口一样，最后沉淀到有价值和结构的信息。而不是一上来就进行设置，当然一上来进行设置也是可以的，日后进行设置应该也没毛病。对于使用者来说，应该看到的是明确的提醒信息。 信息既组合 敏捷项目的某一个协作介入点，可能都是整体信息的一个片面，一个角度。如何能够使得协作数据逐渐成长成为拥有整体结构的信息，而不是一上来就想好整个信息的布局与结构。 结构复杂、上推、下拉的动态性：任何一个信息的输入都应该可以进行横向扩展（结构复杂），比如增加更多的二维数据，增加类型，增加更多的字段。也可以与其他信息进行关联，成为其他信息或数据的儿子（上推）或父亲（下拉）。也就是说这样就是一种灵活的结构而不是一种僵化的结构。使得“重构”得以发生。 数据重构能力：任何信息都有其可能相关与相连的内容，这些关联内容不一定一开始就能够明确，如何能够通过信息与数据重构的手段使得更合适的结构得以发生。 颜值既正义 使用软件应该是愉悦的，起码可以让使用者感到了尊重。让使用者感觉是Ta在使用软件，而不是软件在使用自己。软件的颜值我认为基本分为视觉和交互两大部分： 简洁的视觉感受：协作工具其实是生产力工具的一部分，生产力工具第一个关键的特征是简洁的感受。简洁之后，可以让使用者的注意力关注到事物重点的内容，而不是提醒或结构信息。 直接的交互感受：任何的功能都应该是一个12岁的学生能够操作的范围，不应该有过多的培训和说明过程。更不能有反直觉的设计内容。比较让人欣慰的是大部分软件在这个领域已经不是短板了。 丢弃既丢弃 什么是丢弃既丢弃呢？就是这个工具可以相对简单和舒适的离开团队，而不是一旦选用这个工具之后我们就无法离开这个工具。看到过一些场景，感觉企业是在被一些工具进行胁迫。这就会到了一管就死，一放就乱的管理两难境地。所以选择一个敏捷工具它是不是可以迅速的被丢弃，是非常重要的衡量指标。 系统一般有两种系统，一种系统是让你尽可能的陷入其中，另一种系统是让你尽可能的摆脱这个系统。对于传销来说就是就是前一种系统，而儿童养育的过程就是第二种系统。如果一个工具始终都希望你的数据停留在它的系统之中，不愿意随时迎接丢弃的命运。我认为这种工具也是一种防守型工具，它不适合敏捷的协作要求。 有效的导出与导入功能：一个随时可以丢弃的系统，需要有一个有效的导出和导入功能。这个功能要足够的好用，以至于可以用Excel或其他简单的工具进行替代。也恰恰是因为有这种功能的存在，数据的安全性也会提高一个档次。 总结 感知既真实 操作与显示的即时性：一人操作其他机器即时展现； 结构与冲突的直观性：能够标明重点或打标签； 使用既配置 使用的过程就是配置的过程：没有配置菜单（或基本用不到）； 配置信息的版本控制与记录保存：设置信息的版本化可回滚化； 管理既提醒 数据输入与管理的松耦：能够输入不符合管理要求的数据，并能通过修改与调整进行修正； 提醒而不是阻止：提醒哪些内容与要求不相符； 信息既组合 结构复杂、上推、下拉的动态性：能够相互关联，并能扩展自己的结构。 数据重构能力：数据嫁接与重新定义结构能力； 颜值既正义 简洁的视觉感受：清爽； 直接的交互感受：12岁的学生都能够使用； 丢弃既丢弃 有效的导出与导入功能 一共六项要求，每一项一分。超过4分就是一个好的敏捷协作工具，如果是1分或2分的话，不建议选用这样的工具。 重新思考 Jira？Wiki？ 你可能会问Jira这个工具该如何打分呢？首先我不承认它是一个敏捷的协作工具，它是有敏捷协作能力的企业流程沉淀工具。Jira的一个非常重要的概念叫Issue，什么是Issue？Issue就是将要启动企业流程的一个又一个的问题领域。Jira通过对Issue进行建模形成了企业的流程资产，运行的时间长了就会总结形成企业的流程数据资产。 如果硬要打分的话： 感知既真实 1分 （基本实时显示） 使用既配置 0分 （需要管理员的配置） 管理既提醒 0分 （需要配置）这个我不太确定 信息既组合 0分 （需要配置） 颜值既正义 0 分 （太复杂，但也可以勉强给分） 丢弃既丢弃 1 分 （导出导入功能还是比较到位的） 好了，这样的话，可以算Jira同学2.5分。对于Wiki来说的话最少4.5分，多么有趣的比较啊。 平衡进攻与防守 对于企业电子工具的使用，需要平衡防守与进攻。不一定一个进攻十足的工具就是合适的。可能当下需要控制多一些，但如何能够走上一条逐渐敏捷化的工具之路是企业中每一个人都需要思考的内容。这坚决不是简简单单的选择某个工具就完事的，而是如何持续的选择企业合适的工具，如何让企业协作的工具走上更为敏捷的道路，这才是这篇文章真正期望达到的效果。 "},"F7.html":{"url":"F7.html","title":"F7 学习与调整","keywords":"","body":""},"measurement.html":{"url":"measurement.html","title":"如何通过度量更好的管理技术组织","keywords":"","body":"如何通过度量更好的管理技术组织 作者：王宇（ACT Leader） Attention goes where energy flows. --James Redfield 关注所向能量所至。——詹姆斯·雷德菲尔德 基本内容与原则 现在越来越多的公司逐渐成为一家软件公司，而软件公司成为了救火公司。为什么是救火公司呢？因为成长速度太快了，这种成长的速度使得大家没有精力关注如何慢慢的把事情干好。全部在救火的事情之上，能够救火确实是一种能力。 但如何形成一张监控的网络并打造一套能够有效运转的机制。让我们的精力不会在基础的问题上重复消耗没必要的时间。度量应该如同定期体检一般，我们检查的项目应该有所覆盖，但不应该太细致。如同如果2020年春节附近的话，你有发烧症状，医院肯定会进行更细致的度量与分析。也就是说我们需要根据组织当前的最大挑战与风险再确定增加度量的内容。 也就是说需要关注整体度量安全网的搭建，并根据风险情况强化某些角度的度量内容。 对于关注点，肯·威尔伯给出了非常好的建议：Integral Operating System（整合运作系统）的四个角度。关注个体(I)、行为(IT)、结构(ITS)、文化(WE)。这里我们将通过这四个角度进行安全网的搭建。 这里需要明确一点的是现有的部门分工，让不同的部门分管不同的领域。但从整体角度来看，所有这些角度度量都是重要的。你可能因为职责原因无法触及一些度量领域，但你要清楚知道你缺失的部分。 安全网知识内容补充完毕之后，就是实施的过程。实施的过程其实就是选择看中哪些领域的过程。选择需要强化的度量领域进行强化。因为看到信息的过程，是一个逐渐睁开眼睛的过程。你会非常兴奋的添加更多的度量内容，但这是非常不建议的。补充之前的一句话那就是： 关注整体度量安全网的搭建，并根据风险情况强化某些角度的度量内容。选择需要强化的度量领域推进实施过程，切忌随意增加度量的数据范围。 如果遇到内部或外部触发的某些提升风险的事件，就可以增加度量的内容，并与团队整体保持透明沟通。明确告知因为风险的提高所以增加某些角度的度量信息。 所以说，观察者会影响观察对象，对于度量就是这个样子的。要极为慎重的进行选择，步步为营的推进，切不可把米做夹生了。 关注 这里指的是整体度量安全网的搭建关注点。作为一个安全网来说，哪些安全的探针可以在危险出现的时候就能够显示出对应的信息。对于精益的实施，一般有两个角度的力。一个使系统更快，一个使系统更慢。恰恰是这两个力的平衡状态使得交付过程平稳且高效的。 这就如同体温一样，36.5度一般视为正常的，太低不好，太高也不好。但有一些人，体温就和大家不太一样，比如对于她来说，体温35.5度就是正常的体温。所以各位有两点需要注意的： 度量是反应真实情况的（事实） 每个团队的“正常”状态不一样（尊重） 产品与项目的角度 关注 需求前置时间（LeadTime） 缺陷数量 需求前置时间是一个让整体更快的力，而缺陷数量是一个让整体更慢的力，因为如果没有一个合适的节奏和效率前提下，越快的速度就会直接导致缺陷数量提高。只看前置时间可能会让系统一味追求速度，而忽略节奏感。关注缺陷数量其实就是平衡前置时间的一种手段。 什么是前置时间呢？ 前置时间指的是一个过程从发起到执行完毕之间间隔的时间。比方说，一辆新汽车从下订单到生产完毕开始运送之间需要花费的前置时间无论如何都大概需要两周到六个月时间。在制造业，缩短前置时间是精益生产中较为重要的一环。——维基百科 对于软件行业的前置时间如何计算呢？ 如手册中所描述，任何需求明确程度分为沙子，板砖以及钻石阶段。沙子需求就是任何未经过讨论的需求，充满潜在风险。对于板砖需求就是经过讨论，经过了拆分，拥有估算，风险可控的需求。软件行业的前置时间就是从客户在生产环境可以感知到这个需求的时间点减去沙子需求移动到板砖状态的瞬间时间点。 软件行业的前置时间 = 需求上生产环境时间点 - 需求从沙子移动到板砖的时间点 大家肯定会问，一般看板方法不是从“已选择”开始的嘛？那已选择和板砖时间有什么区别呢。“已选择”的过程是整个系统以流式假设的一个顺理成章的推论，但在现实之中操作过程中团队对这个“已选择”有一些迷惑。而且因为系统之间的耦合依赖使得，交付时间点区间承诺（有85%的可能性在3周内实现）成为了空中楼阁。在沙子移动到板砖的过程，是一个强制沟通的过程。而且沟通的产出就是粒度平准、风险控制之后的内容。交付的承诺时间点在于，形成钻石之后的需求。 缺陷的数量有什么需要注意的嘛？ 我们需要明确哪些是缺陷，哪些是新增需求。记得有一个程序员T-shirt上面写着“This is a new feature, not a bug.”，虽然这是个笑话，但确实需要注意。什么是缺陷，缺陷是之前的设计中1+1=2，但现在的结果是3。什么是新需求，新需求是设计中原来没有涉及乘法，所以这是一个新特性。这么做的一个前提要求是，之前的需求必须都经历过钻石阶段。因为钻石阶段就是需求边界清晰的一个阶段。 统计缺陷的方式可以以某个时间点进行快照的方式进行统计。如：在今天早上8点，生产环境、测试环境上，未修复、正在修复、修复完成的数量是多少。 结构与边界的角度 关注 事件响应速度 关键节点堆积 对于组织之中，我们期望更灵活的响应速度，更柔性的内部结构。但是对于任何组织来说，专业化分工使得内部结构呈现僵化的趋势。所以我们关注事件响应的速度，以及关键节点的堆积来探针系统之中的结构问题。这两个关注点对于结构来说是在不同维度的。事件响应速度看的是一个组织结构的反应效率（意愿），而关键节点堆积看的是结构的健康度（能力）。 事件响应可以分为不同类别，公司级、项目级、产品级，技术级。也就是从不同高度审视响应速度，最小的级别可以是缺陷的修复速度。技术级关注的是技术债务从发现到解决的速度。产品级关注的是从客户感知的某个突发事件从发现到解决的速度（比如缺陷修复响应速度，从发现到客户感知的解决）。项目级关注的是项目的重要策略是否快速得到推进（比如营改增这个项目推进的速度，从开始做到实现阶段性效果）。 公司级关注的是公司的战略方向事件的响应速度。注意这不是说战略开始之后从开始到战略落地的时间长度，而是在公司战略推进的过程中发现的一些突发事件的响应速度。比如说公司的IT与业务部门进行整合形成若干中心，中心形成的过程会发现有很多中层干部培养的需要。如何快速实现中层干部培养就是我们要进行关注的内容。从事件发现的时间点，到形成阶段性成果的时间点。公司级的事件响应就统计这些内容。 关键节点其实就是关键价值流上的关键节点，比如沙子需求的数量，与板砖需求的数量就能看出需求积压的情况（业务如果需求太多的话会停留在沙子区域）。板砖需求的数量就能看出风险控制的情况（板砖需求其实就是团队需求远光灯的探针过程，如果板砖太少或太多都可能存在潜在风险）。开发完成需求的数量与测试进行中数量的对比，能够看出开发与测试之间的平衡状态。 这里需要注意的是，关键节点不是某个角色或是岗位。而是岗位与岗位之间，角色与角色之间的交叉位置。这个交叉的位置才能反映出一些现象与状态，如果你只关注角色和岗位的话，那一切都会是完美的世界。 如果发现积压或空白这都是系统与结构出现需要调整的信号。但要注意关键节点，的关键二字。如果你什么都想关注就不叫关键节点了。所以你需要确定当前结构中主要潜在的问题假设，并通过持续收集数据来验证结构中的假设是否成立。也恰恰是应为有数据的前期准备，所以如果结构调整之后，应该可以看出数据的区别和改变。 关系与协作的角度 关注 反馈与评价 可改进的事项 对于关系和协作角度，反馈与评价关注的是关键节点的上下游反馈，可改进的事项关注的是团队内部推动工作的障碍与问题。这个角度也可以关注到企业文化的倾向于变化。 反馈与评价其实很简单，就是让关键节点的相关角色互相给出主观反馈评价。内容可以是这样的： 关键节点名称：（如需求沟通与讨论，或IT交付） 目标反馈角色：（如BA或业务、SA） 总体评价（针对整体对接角色或岗位） 总体评价分数：（满分10分） 可以提高或优化的内容：（以文字的形式收集） 反馈内容（针对每个个人） 肯定和认可的内容：（文字形式收集） 可以提高和改进的内容：（文字形式收集） 反馈可以使用匿名收集的方式，但需要明确关键节点以及填写信息的角色是什么。定期收集这些信息，比如以季度为单位。但注意的是，追求的不是分高。这只是关系与感受的主观评价，这种主观评价只有在反馈数量达到一定数量的前提下效果才会显现。 可改进的事项就是团队中发现的问题与困扰，需要注意的是这里不是改进的行动项，而是行动项之前的问题。比如招商银行就关注蛋壳所提交的内容与信息。如果有回顾会议的话，可以让团队集中填写，这样的话汇总起来就更为简单一些。 如果可以使用大数据的方式进行分析，也是一个非常好的思路。这样就能知道大家是不是在相似的地方有着相似的困扰。还是大家一切都是好好先生，把灰尘扫到毯子的下面。 不管是反馈和评价还是可改进事项都要关注趋势和整体的反馈，而不要纠结哪个人给具体哪个人什么反馈。因为如果你在意的话，可能就没有什么真实的反馈可言了。 岗位与成长的角度 关注 岗位评价 领导力与多样化成长 任何的组织在成长一段时间之后，都会有一种让每个岗位更加专业化和分工细致化的趋势。这种趋势之下，岗位的评价就是工资以及奖金关键的输入来源。但仅仅关注岗位评价是不够的，因为这种力的方向会使得更加专业、分工更加细致。会使得员工成为庞大机器上的某个高速运转的零件。 确实某些公司进化的状态是需要让员工成为组织机器上的高速运转的零件，如果是这样的企业来说，没有问题。你强化这方面的关注度就可以了，但你要注意的是始终有另一个力的存在。这个里就是领导力与多样化成长。岗位评价让员工向着更专业更细致的方向前进，领导力与多样化成长是让员工朝着更泛化并彰显领导力的方向发展。 对于岗位评价的话，可以简单使用：不满足期望、符合期望、超过期望，进行评价。当然如果ABCD分段的话，也是类似的。但需要说明的一点是，对于ABCD分段的这种内容，属于强制排序。强制排序不应该强制比例，因为如果你强制说必须有10%的D的话，这本身没有提供更多信息。你是在假设整体结构和岗位设置都完美的前提下让给大家进行分类而已。让大家更像一个零件高速运转，这反而让组织中的人可能成为组织进化的障碍。 之前在线下敏捷分享活动上，听到有个人与另一个人闲聊。他说，整个公司的HR就他们两个会参加这种业余的学习活动。组织中需要这样人的存在，就如同植物生长需要飞鸟的粪便，雨水中的其他养分一样。 领导力与多样化成长需要关注，员工自己的成长计划，并与自己的“师父”或“Mentor”进行持续的沟通与确认。比如在不同领域发出声音、引领新的创新性内容、参加业务的分享甚至是学一种新的乐器，参加某个乐队。其实这对于进化中的组织是重要的。可以形成师徒机制来跟进和总结相关的内容。把每个人的领导力与多样化成长也纳入组织的视野之中。 具体可以形成半年一次的成长计划沟通机制，并总结成长计划的事项。如同网状结构管理起整个的多样化过程是重要的，而且遇到某些事件的时候说不定可以通过这个网络来更好的解决一些问题。 对于那些希望员工成为高效齿轮的公司，这项内容的统计可能有些别扭。没关系，这些内容只是建议并告诉大家可能会错过一些内容就是。对于某个人的工资一般来自几个方面： 市场同样角色的工资 绩效 这其实就是岗位评价 岗位等级或公司认可的其他内容 可以增加领导力与多样化成长这部分内容 可以酌情使用这三个角度的平衡来形成一种对人才鼓励和认可的反馈机制，而不是形成某种打击机制。 总结 产品与项目角度 需求前置时间（LeadTime）（更快） 需求上生产环境时间点 - 需求从沙子移动到板砖的时间点 缺陷数量（更稳） 生产环境、测试环境上，未修复、正在修复、修复完成的数量是多少 注意区分缺陷与新特性 结构与边界的角度 事件响应速度（边界更弱化） 公司级、项目级、产品级，技术级 公司级：战略推进的过程中发现的一些突发事件的响应速度 关键节点堆积（结构更敏感） 关键节点不是某个角色或是岗位。而是岗位与岗位之间，角色与角色之间的交叉位置。 关系与协作的角度 反馈与评价（外部感受更好） 关键节点的相关角色互相给出主观反馈评价 可改进的项目（内部感受更好） 团队中发现的问题与困扰 是改进项之前的问题 岗位与成长的角度 岗位评价（降低不确定性） 不满足期望、符合期望、超过期望 领导力与多样化成长（提高不确定性） 半年一次的成长计划沟通机制，并总结成长计划的事项 实施步骤 每个企业的情况是不一样的，这里的情况一词有很多含义。一方面是企业演进的程度，另一方面是机遇与痛点。 对于演进程度来说，有一些企业更为传统追求组织各部分所谓的正确，追求各司其职。有一些企业追求更好的为目标服务，一切的措施就是为了得到结果。一些企业追求协作和配合，并努力实现更高效的配合。另外的一些企业在让员工很爽的路上就顺便实现了企业的目标。 非常明显的是，本文针对的不是追求各司其职的企业，更是追求结果及以后的企业。如果你不想关注太多的话，上图橙颜色的部分就做了吧（产品与项目角度）。这不多，如果这几个你都没有收集的话，就说不过去了。 如果橙颜色的实现了，就逐渐的实现绿色的部分吧（结构与边界的角度、关系与协作的角度）。这部分实现可以让企业的协作提升到下一个层次之前做好很多数据的准备。 如果橙色和绿色的都已经准备就绪的话，恭喜你，你可以向着更细致的角度进发。实现黄颜色部分的度量（岗位与成长的角度）工作。当然这部分，对于岗位评价或是绩效考核来说，应该是具备相关内容了。但再提醒一下，这部分的初衷坚决不是让员工像个机器一样的“高效”运转。 如果是机遇与痛点的角度切入整个实施的过程的话，可以分析一下哪个领域可以很好的解决痛点或面对机遇。然后出师有名的进行推进。 当然，对于实施部分欢迎找到我来与你一起实施整个组织度量的过程。 一些问题 如何面对分散的系统，收集难度大？ 系统很多的话，要有某些领域的侧重收集。比如对于项目前置时间（LeadTime）的话，以一个系统为主，其他系统为辅，作为启动度量的第一步。不要轻易否定任何一个角度收集的数据，但需要非常明确的说明我们不会作为重点来从某些渠道收集度量数据。 收集难度大的话，我不太相信这句话。只要想办一件事你就应该能找到方法，除非你不想做（领导认为优先级不高）。 度量信息该用何种角度进行展现和解读？ 前面的文字其实已经写得比较详细了，如果还需要我的一些嘱咐的话。我想说的是，先展现这个安全网所度量出现的数据，并进行初步解读。再根据重点工作认为进行数据展现，并综合之前的数据进行综合解读。 不要追求大而全，甚至是过分的细节化。明确近期、远期的风险点，再根据这些风险点进行展现和解读就可以了。 如何度量敏捷导入的效果？ 敏捷的导入应该会触动很多上面的度量数据，养成定期收集数据的习惯，而不是敏捷项目实施之后再进行度量。这样的话只有主观反馈以及领导的口碑能够反映导入效果了。 如何度量产品经理的能力？ 产品经理的能力，其实就是上面所提及的关键节点。 表现不好能力差的表现： 一堆沙子需求，很少的板砖需求； 需求交付前置时间的从板砖到钻石的时间部分时间比较长，堆积严重； 业务反馈不好，开发团队反馈不好； 等等…… 如何度量团队研发能力与效能？ 这是个很大的话题，要从多个角度进行衡量。比如： 各个角度的主观反馈； 团队交付的前置时间（LeadTime）； 缺陷的数量； 事件响应速度； 关键节点堆积情况。 但需要注意的一点是，这只是健康的一些侧面证据而已，不代表健康的话就能推导出这些。这些证据是健康的充分条件，但如果团队各方面状态都无与伦比，可能也会超过这些指标的测量范围。 有的时候主观反馈的适用度更高一些，但这确实就无法进行横向比较了。退后一步来说的话，先实现上面的那些度量吧。看看是否能够满足一些要求，然后再说下一步。 如何度量估算的准确性？ 这个问题将在估算的文章中详细描述。 This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "}}